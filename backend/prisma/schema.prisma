// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model users {
  user_id       Int       @id @default(autoincrement())
  name          String
  email         String    @unique
  password_hash String
  citizen_id    String    @unique
  birth_date    DateTime
  phone         String    @default("")
  gender        String    @default("unknown")
  role          String    @default("patient")
  address       String    @default("")
  status        String    @default("active")
  created_at    DateTime  @default(now())
  updated_at    DateTime  @updatedAt

  refreshTokens RefreshToken[]
  doctorProfile DoctorProfile?
  appointments  Appointment[]
}

model RefreshToken {
  id         Int      @id @default(autoincrement())
  tokenHash  String
  user_id    Int
  user       users    @relation(fields: [user_id], references: [user_id])
  createdAt  DateTime @default(now())
  expiresAt  DateTime
}

model DoctorProfile {
  user_id      Int          @id
  user         users        @relation(fields: [user_id], references: [user_id])
  specialtyId  Int
  specialty    Specialty    @relation(fields: [specialtyId], references: [id])
  licenseNo    String?
  bio          String?

  slots        DoctorSlot[]
  appointments Appointment[]
}

model Specialty {
  id      Int             @id @default(autoincrement())
  name    String          @unique

  doctors DoctorProfile[]
}

model DoctorSlot {
  id         Int           @id @default(autoincrement())
  doctor_id  Int
  doctor     DoctorProfile @relation(fields: [doctor_id], references: [user_id])
  startTime  DateTime
  endTime    DateTime
  status     String        @default("available")
  createdAt  DateTime      @default(now())

  appointments Appointment[]
}

model Appointment {
  id          Int          @id @default(autoincrement())
  
  patient_id  Int
  patient     users        @relation(fields: [patient_id], references: [user_id])

  slot_id     Int
  slot        DoctorSlot   @relation(fields: [slot_id], references: [id])
  
  doctor_id   Int
  doctor      DoctorProfile @relation(fields: [doctor_id], references: [user_id])

  status      String       @default("booked") // booked | canceled | done
  created_at  DateTime     @default(now())
  updated_at  DateTime     @updatedAt
}


